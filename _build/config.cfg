# -*- sh -*-
######################################################################

set -u				# Treat unset variables as an error

# Script nanme
me=$(basename $0 .sh)

error() {
    echo "$me: $*" >&2
    exit 1
}

[ "${DESTDIR+set}" ] && export DESTDIR

if [ -z "${VERSION+set}" ]; then
    VERSION=${PROJECT#*-}		# project version
fi
PACKAGE=${PROJECT%%-$VERSION}	# project name (gcc...)
PATCH=-mint-20180703		# this int toolchain version
BUILD=`gcc -dumpmachine`	# machine we build on
HOST=${PWD##*/}			# machine to host this gcc
TARGET=m68k-atari-mint		# target machine
ARCH=${ARCH-$HOST}		# ARCH is usually HOST
USR=/usr		    # NATIVE_SYSTEM_HEADER_DIR is $USR/include
LOCALTIME=Europe/Paris	    # TZ for mint setup

STAGE1=`realpath -sm ../_$BUILD-stage1`
TARGETROOT=`realpath -sm ../../sys-root`

if [ $HOST != $BUILD ]; then
    # If don't want STAGE1 in crosscompile because we will need a full
    # build-system target compiler anyway (or so it seems).
    cross=yes
else
    # stage1 does not care about HOST as it is the tools to build target
    # objects on the BUILD system.
    unset cross
fi

######################################################################
#
# Parse command line to retrieve our own options
#

help=''
force=''
unset with_sysroot system

# Default stage might be in the script name as well as sysroot and
# system
stage=0
for part in ${me//-/ }; do
    case "$part" in
	stage1)     stage=1 ;;
	stage2)     stage=2 ;;
	sysroot)    with_sysroot=yes ;;
	system|sys) system=yes ;;
    esac
done

# Looking for --help --force --stage --with-sysroot --system
for arg in : "$@"; do
    case "$arg" in
	:) set -- ;;
	-h|--help*) help+="${help:+ }$arg" ;;
	-F|--force) force=yes ;;
	-p1|--stage=1) stage=1 ;;
	-p2|--stage=2) stage=2 ;;
	--with-sysroot|--sysroot) with_sysroot=yes ;;
	--system) system=yes ;;
	*) set -- "$@" "$arg" ;;
    esac
done

# Setup INSTALLDIR (ignored by stage1)
case ${cross-no}/${system-no} in
    */no)
	INSTALLDIR=`realpath -sm ../../_$HOST` ;;
    no/yes)
	INSTALLDIR=/usr ;;
    yes/yes)
	INSTALLDIR=`realpath -sm ../../_$HOST/usr` ;;
    *)
	unset INSTALLDIR; false ;;
esac
	   
# Set PROJECT (Which packages need a mint patch) ?
case "$PACKAGE" in
    binutils|gcc|pml|gdb) PROJECT=$PROJECT$PATCH ;;
    mintlib|mintbin|pkg-config) ;;
    *)
	error "unknown package -- '$PACKAGE'${VERSION:+ ($VERSION)}"
	exit 1 ;;
esac

[ ${SOURCES+set} ] ||
    SOURCES=../../_sources/$PROJECT
SOURCES=`realpath -e "$SOURCES"`
CONFIGURE="$SOURCES/configure"

######################################################################
#
# Need help ?
#
if [ "${help}" ]; then
    if [ -x "$CONFIGURE" ]; then
	exec "$CONFIGURE" ${help} |& { [ -t 1 ] && less || cat; }
    else
	error "can not help with $PACKAGE"
    fi
    exit 1
fi

######################################################################
#
# Prefix and path
#
ADDED_PATH=()
case $PACKAGE-$stage in
    mintlib-* | pml-*)
	[ ${cross+set} ] &&
	    error "Refusing to build ${PACKAGE} with a cross-compiler"
	[ $stage == 0 ] ||
	    error "Wrong stage for ${PACKAGE} -- #${stage}"
	PREFIX=$TARGETROOT$USR
	ADDED_PATH+=( "$STAGE1/bin" )
	
	;;
   
    binutils-1 | gcc-1)
	[ ${cross+set} ] &&
	    error "Refusing to build ${PACKAGE} #$stage with a cross-compiler"
	PREFIX="$STAGE1"
	;;

    binutils-2 | gcc-2 | mintbin-0 | pkg-config-0 | gdb-0)
    	PREFIX="$INSTALLDIR"
    	;;

    *)
	error "Invalid package at this stage -- $PACKAGE #$STAGE"
	;;
esac

if [ ${with_sysroot+set} ]; then
    SYSROOT=$TARGETROOT
    SYSROOTUSR="$SYSROOT$USR"
else
    unset SYSROOT SYSROOTUSR
fi

######################################################################
#
# Default configure arguments
#

CONFIG=()

CONFIG+=(
    --host=$HOST
    --build=$BUILD
    --target=$TARGET
    --prefix=$PREFIX

    --disable-nls
    
    --with-gnu-as
    --with-gnu-ld

    --disable-gold
    
    --disable-host-shared
    --disable-shared
    --enable-static
)

if [[ ${BUILD} = *-cygwin ]]; then
    CONFIG+=(
	--enable-cloog-backend=isl	# cygwin does not have PPL
    )
fi

if [ $stage -ne 1 ]; then
    [ "${system+set}" ]  && PROJECT+="-sys"
    [ "${SYSROOT+set}" ] && PROJECT+="-sysroot"
fi    
[ "$stage" -ne 0 ] && PROJECT+="-stage$stage"

case ${PACKAGE}-${stage} in
    mintlib-0 | pml-0)
	PROJECT=../_$TARGET/_build-${PROJECT}
	;;
    
    mintbin-0) 
	;;
    
    binutils-1 | gcc-1)
	PROJECT=../_$BUILD/_build-${PROJECT}
	;;

    binutils-2 | gcc-2)
	if [ ${cross+set} -a ! ${sysroot+set} ]; then
	    ADDED_PATH+=( `realpath -sm ../../_$BUILD/bin` )
	fi
	;;

    *)
	echo "What to do with $PACKAGE stage#$stage ?"
	false
	;;
esac

if [ -e "$PROJECT" ]; then
    if [ ${force:-no} = yes ]; then
	echo "> deleting -- $PROJECT"
	rm -rf -- "$PROJECT"
    else
	error "$PROJECT exists (use --force)"
    fi
fi

mkdir -pv "$PROJECT"
cd "$PROJECT"

######################################################################

cat <<EOF

PROJECT : $PACKAGE $VERSION${stage:+ (stage #$stage)}
=======
HOST    : $HOST
BUILD   : $BUILD
TARGET  : $TARGET
-------
PREFIX  : $PREFIX
SOURCES : $SOURCES
SYSROOT : ${SYSROOT-<none>}${SYSROOT+ ($USR)}
-------
PWD     : $PWD
EOF
echo -n "PATH    :"
if [ ${#ADDED_PATH[@]} -eq 0 ]; then
    echo " <none>"
else
    for path in "${ADDED_PATH[@]}"; do
	echo " $path"
	PATH="$path:$PATH"
    done
    export PATH
fi
echo '-------'; echo

case $PACKAGE-$stage in
    mintbin-*) ;;
    *-0)
	$TARGET-gcc --version | grep -wm1 gcc
	$TARGET-ld  --version | grep -wm1 ld
	;;
esac
